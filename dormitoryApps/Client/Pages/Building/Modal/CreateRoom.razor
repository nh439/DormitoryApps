@using Blazorise;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@inject RoomServices _roomServices;
@inject RoomTemplateServices _roomTemplateServices;

@code {
    Modal e;
    Room item = new Room(){Floor=1};
    int floor;
    string[] templates;
    string selectedTemplate;
    bool isTemplated = false;
    public async void open(int buildingId)
    {
        e.Show();
        item.Building = buildingId;
        var allroom = await _roomServices.GetByBuilding(buildingId);
        var maxfloor = allroom != null && allroom.Count > 0 ?  allroom.Select(x => x.Floor).ToArray().Max():0;
        floor = 1 + maxfloor;
        templates = await _roomTemplateServices.GetTemplateNames();
        await InvokeAsync(StateHasChanged);
    }
    private void CheckBoxChanged(ChangeEventArgs e,out bool changeResult)
    {
        changeResult = e.Value.ToString().ToLower() == "true" ? true : false;
    }
    private async void SaveChanges()
    {
        Random ra = new Random();
        try
        {
            item.Id = ra.Next(int.MinValue, int.MaxValue);            
            if(!string.IsNullOrEmpty(selectedTemplate))
            {
                var myTemplate = await _roomTemplateServices.GetByName(selectedTemplate);
                item.FurnitureList = new List<RoomFurn>();
                foreach(var f in myTemplate.Furnitures)
                {
                    item.FurnitureList.Add(new RoomFurn
                        {
                            Attr01 = f.Attr01,
                            Attr02 = f.Attr02,
                            Attr03 = f.Attr03,
                            Attr04 = f.Attr04,
                            Attr05 = f.Attr05,
                            Attr06 = f.Attr06,
                            Model = f.Model,
                            Name = f.Name,
                            Price = f.Price,
                            Type = f.Type,

                        });
                }

            }
            var res = await _roomServices.Create(item);
            if(res)
            {
                success.NextRequired = false;
                success.Header = "Complete";
                success.Details = "เพิ่มสำเร็จ";
                success.Open();
                e.Hide();
                await InvokeAsync(StateHasChanged);
                return;
            }
            error.Header = "!Oops!";
            error.Details="เพิ่มไม่สำเร็จ";
            error.Open();
        }
        catch(Exception x)
        {
            error.Header = "!Oops!";
            error.Details=x.Message;
            error.Open();
        }
        await InvokeAsync(StateHasChanged);
    }
    private async void tps(ChangeEventArgs e)
    {
        var x = e.Value.ToString();
        selectedTemplate = x;
        isTemplated= !string.IsNullOrEmpty(x);
        if(isTemplated)
        {
            var tmplate = await _roomTemplateServices.GetByName(x);
            if(tmplate == null)
            {
                isTemplated= false;
                return;
            }
            item.Aircond=tmplate.Aircond;
            item.Size=tmplate.Size.HasValue ? tmplate.Size.Value:0;
            item.Rental=tmplate.Rental;
            item.WaterHeater=tmplate.WaterHeater;
            item.TV=tmplate.TV;
            item.Fan=tmplate.Fan;
            item.Fridge=tmplate.Fridge;
            item.Enabled=tmplate.Enabled;
        }
        await InvokeAsync(StateHasChanged);
    }

}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css"> 
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<Modal @ref="e" Style="color:black">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>
                เพิ่มห้อง
            </ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            <div class="form-group">
    <label for="text">ชื่อห้อง</label> 
    <input id="text" @bind-value="item.RoomName" type="text" class="form-control">
  </div>
  <div class="form-group">
    <label for="select">ชั้น</label> 
    <div>
      <select id="select" @onchange="e=>item.Floor=int.Parse(e.Value.ToString())" class="custom-select">
          @for(int i = 1 ; i<=floor;i++)
                        {
                            <option value="@i">ชั้นที่ @i</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="text1">ขนาด</label> 
                <div class="input-group">
                    <input id="text1" @bind-value="item.Size" type="number" min="1" step="0.01" class="form-control"> 
                    <div class="input-group-append">
                        <div class="input-group-text">ตร.ม</div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="text2">ค่าเช่า</label> 
                <div class="input-group">
                    <input id="text2" @bind-value="item.Rental" type="number" class="form-control"> 
                    <div class="input-group-append">
                        <div class="input-group-text">บาท/เดือน</div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="select1">From Template</label> 
                <div>
                    <select id="select1"  @onchange="tps"  class="custom-select">
                        <option value="" selected>Custom</option>
                        @if(templates != null)
                        {
                            @foreach(var t in templates)
                            {
                                <option value="@t">@t</option>
                            }
                        }
                    </select>
                </div>
            </div> 
            <div class="form-group">
                <label>สิ่งของภายในห้อง</label> 
                <div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.Aircond=result;}" checked="@item.Aircond" id="checkbox_0" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_0" class="custom-control-label">เครื่องปรับอากาศ</label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.WaterHeater=result;}" checked="@item.WaterHeater" id="checkbox_1" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_1" class="custom-control-label">เครื่องทำน้ำอุ่น</label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.TV=result;}" checked="@item.TV" id="checkbox_2" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_2" class="custom-control-label">TV</label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.Fan=result;}" checked="@item.Fan" id="checkbox_3" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_3" class="custom-control-label">พัดลม</label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.Fridge=result;}" checked="@item.Fridge" id="checkbox_4" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_4" class="custom-control-label">ตู้เย็น</label>
                    </div>
                    <div class="custom-control custom-checkbox custom-control-inline">
                        <input @onchange="e=> {CheckBoxChanged(e,out bool result) ;item.Enabled=result;}" checked="@item.Enabled" id="checkbox_5" type="checkbox" class="custom-control-input" value="true" disabled="@isTemplated"> 
                        <label for="checkbox_5" class="custom-control-label">เปิดเช่า</label>
                    </div>
                </div>
            </div> 
        </ModalBody>
        <ModalFooter>
            <Button Class="btn-outline-primary" @onclick="SaveChanges">Save Changes</Button>
            <Button Class="btn-outline-secondary" @onclick="()=>e.Hide()">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<dormitoryApps.Client.Pages.Modal.Error @ref="error" />
<dormitoryApps.Client.Pages.Modal.Success @ref="success"/>
@code{
    private dormitoryApps.Client.Pages.Modal.Error error;
    private dormitoryApps.Client.Pages.Modal.Success success;
}
