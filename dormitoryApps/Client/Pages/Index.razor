@page "/"
@using System;
@using System.Timers;
@using System.Threading ;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@inject SessionServices _sessionServices;
@inject InvoiceServices _invoiceServices;
@inject MyServicesServices _myServicesServices;
@inject OfficerServices _officerServices;
@inject NotificationServices _notificationServices;
@implements IDisposable
<PageTitle>Index</PageTitle>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<h1>Nithi Residences</h1>
<h1 id="h1">
    @now.ToString("dd MMMM yyyy HH:mm:ss")
</h1>
@if (IsloggedIn)
{
    <div class="container">
        <div class="row">
            <div class="col ">
                <div class="card bg-primary">
                    <h2>&nbsp;ห้องพักที่ว่าง</h2>
                    <br />
                    <br />
                    <h1 style="text-align:right">0  &nbsp;</h1>
                </div>

            </div>
            <div class="col">
                <div class="card bg-warning">
                    <h2>&nbsp;ใบเสร็จที่ยังไม่จ่าย</h2>
                    <br />
                    <br />
                    @if (!unpaidInvoices.HasValue)
                    {
                        <h2 style="text-align:right">Fetching... &nbsp; </h2>
                    }
                    else
                    {
                        <h1 style="text-align:right">@unpaidInvoices  &nbsp;</h1>
                    }

                </div>
            </div>
            <div class="col ">
                <div class="card bg-success">
                    <h2>&nbsp;บริการทั้งหมด</h2>
                    <br />
                    <br />
                    @if (!allService.HasValue)
                    {

                        <h2 style="text-align:right">Fetching... &nbsp;</h2>
                    }
                    else
                    {
                        <h1 style="text-align:right">@allService &nbsp;</h1>
                    }
                </div>
            </div>
        </div>
    </div>
    <br />
    <br />
    <br />
    <div class="row">
        <div class="col">
            <center>
                <h2>การแจ้งเตื่อน/ข่าวสาร</h2>
            </center>
            @if (notifications != null && notifications.Count > 0)
            {
                @foreach (var notification in notifications)
                {
                    string classes = notification.SendAll ? "bg-warning":"bg-danger";
                    <div class="card @classes">
                        <h3>@notification.SenderFrom</h3>
                        <br>
                        <h4>@notification.Detail</h4>
                        <br>
                        <a href="@($"/notification/{notification.Id}")">Read More</a>
                        <br>
                        @ConvertTime(notification.Date)
                    </div>
                }
            }
        </div>
        <div class="col">
            <center>
                <h2>การประชุม/นัดพบ</h2>
            </center>
        </div>
    </div>
}

@code {
    bool IsloggedIn = false;
    DateTime now = new DateTime();
    private System.Timers.Timer aTimer = new System.Timers.Timer(1);
    private System.Timers.Timer bTimer = new System.Timers.Timer(2000);
    private System.Timers.Timer cTimer = new System.Timers.Timer(5000);
    int? availableRoom, unpaidInvoices, allService;
    List<Notification> notifications = new List<Notification>();
    public void StartTimer()
    {
        aTimer = new System.Timers.Timer(1);
        aTimer.Elapsed += Refreshdate;
        aTimer.Enabled = true;

        bTimer = new System.Timers.Timer(2000);
        bTimer.Elapsed += FetchData;
        bTimer.Enabled = true;

        cTimer = new System.Timers.Timer(5000);
        cTimer.Elapsed += FetchNotification;
        cTimer.Enabled = true;

    }
    public void Refreshdate(Object source, ElapsedEventArgs e)
    {
        now = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }
    void FetchNotification(Object source, ElapsedEventArgs e)
    {
        GetNotification();
        StateHasChanged();
    }
    string ConvertTime(DateTime input)
    {
        var span = DateTime.Now.Subtract(input);
        if(span.TotalDays > 7)
        {
            return $"{(Math.Floor(span.TotalDays / 7))} Week ago";
        }
        else if(span.TotalDays >= 1)
        {
            return $"{(Math.Floor(span.TotalDays))} {(span.TotalDays > 1 ? "Days":"Day")} ago";
        }
        else if(span.TotalHours >=1)
        {
            return $"{span.Hours} Hours ago";
        }
        else if(span.TotalMinutes >=1)
        {
             return $"{span.Minutes} Minutes ago";
        }
        return $"{span.Seconds} Seconds ago";
    }
    private async void GetNotification()
    {
        var loginCheck = await _sessionServices.Permissioncheck();
        if (!loginCheck) notifications = new List<Notification>();
        notifications = await _notificationServices.Get();
    }
    void IDisposable.Dispose()
    {
        aTimer?.Dispose();
        bTimer?.Dispose();
        cTimer?.Dispose();
    }
    public async void FetchData(Object source, ElapsedEventArgs e)
    {
        if (IsloggedIn)
        {
            var unpaidInvoice = await _invoiceServices.GetByMonth(DateTime.Now.Month, DateTime.Now.Year);
            unpaidInvoices = (unpaidInvoice != null ? unpaidInvoice.Where(x => !x.Ispaid && !x.Iscancel).Count() : 0);
            var serv = await _myServicesServices.GetMyServices();
            allService = (serv != null ? serv.Count() : 0);
        }
    }
    protected override async void OnInitialized()
    {
        IsloggedIn = await _sessionServices.Permissioncheck();
        var isExpired = await _sessionServices.ExpiredCheck();
        if (isExpired) await _officerServices.Logout();
        StartTimer();
        GetNotification();
    }

}