@page "/Services"
@using System;
@using System.Timers;
@using System.Threading;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;  
@inject SessionServices _sessionServices;
@inject MyServicesServices _myServicesServices;
@inject NavigationManager _navigationManager;
@code {
    List<dormitoryApps.Shared.Model.Entity.MyServices> items;
    public string query { get; set; }
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css">
<center>
    <h1>บริการของเรา</h1>
</center>
<br />
<br />
 <div class="col-8" style="width:50%">
      <div class="input-group">
        <div class="input-group-prepend">
          <div class="input-group-text">
            <i class="fa fa-search"></i>
          </div>
        </div> 
        <input id="query" @bind-value="query" type="text" class="form-control">
        <button @onclick="OnSearch" class="btn btn-info">Search</button>
      </div>
    </div>

<br />
<br />
@if (isLoggedIn)
{
    <button class="btn btn-primary mx-2" @onclick="OnCreate"><i class="plus icon"></i> &nbsp; เพิ่มบริการ</button>
}
<button class="btn btn-info mx-2" @onclick="OnInitialized"><i class="sync icon"></i></button>&nbsp;&nbsp;อัพเดทล่าสุดเมื่อ @lastUpdate.ToLongTimeString()
<br />
<br />
<table class="table" style="text-align:center">
    <thead class="table-dark">
        <tr>
            <th>รหัส</th>
            <th>ชื่อ</th>
            <th>ราคาเบื้องต้น</th>
            <th>ยังให้บริการ</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (items == null)
        {
            <tr>
                <td colspan="5">Fetching...</td>
            </tr>
        }
        else
        {
            if (items.Count == 0)
            {
                <tr>
                    <td colspan="5">ไม่พบบริการ</td>
                </tr>
            }
            else
            {
                @foreach (var item in items)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.Price</td>
                        <td>
                            @if (item.Enabled)
                            {
                                <i class="check icon"></i>
                            }
                        </td>
                        <td>
                            @if (isLoggedIn)
                            {
                                <button class="btn btn-primary mx-1" @onclick="(e=>  OnEdit(item,false))"><i class="edit icon"></i></button>
                                @if (item.Enabled)
                                {
                                    <button class="btn btn-danger mx-1" @onclick="(e=>OnEnabledChanges(item))"><i class="x icon"></i></button>
                                }
                                else
                                {
                                    <button class="btn btn-success mx-1" @onclick="(e=>OnEnabledChanges(item))"><i class="check icon"></i></button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-info mx-1" @onclick="(e=>  OnEdit(item,true))"><i class="eye icon"></i></button>
                            }


                        </td>
                    </tr>

                }
            }
        }
    </tbody>

</table>
<dormitoryApps.Client.Pages.Myservices.Create @ref="create" />
<dormitoryApps.Client.Pages.Myservices.Edit @ref="Edit" />
@code {
    private dormitoryApps.Client.Pages.Myservices.Create create;
    private dormitoryApps.Client.Pages.Myservices.Edit Edit;
    DateTime lastUpdate = new DateTime();
    bool isLoggedIn = false;

    protected override async void OnInitialized()
    {
        StringValues queryres;
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("query", out queryres))  
        {  
            query = queryres;  
        }  
        items = null;
        items = await _myServicesServices.GetMyServices();
        if(!string.IsNullOrEmpty(query))
        {
            items = items.Where(x => x.Name.Contains(query)).ToList();
        }
        if (items == null)
        {
            items = new List<MyServices>();
        }
        isLoggedIn = await _sessionServices.Permissioncheck();
        lastUpdate = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }
    public void OnCreate()
    {
        create.Open();
    }
    public void OnEdit(MyServices services, bool IsReadonly)
    {
        Edit.Open(services, IsReadonly);
    }
    public async void OnEnabledChanges(MyServices item)
    {
        item.Enabled =!item.Enabled;
        await _myServicesServices.Update(item);
        items = null;
        items = await _myServicesServices.GetMyServices();
        if (items == null)
        {
            items = new List<MyServices>();
        }
        isLoggedIn = await _sessionServices.Permissioncheck();
        lastUpdate = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }
    public async void OnSearch()
    {
        var baseUrl = "/Services";
        _navigationManager.NavigateTo(baseUrl + (!string.IsNullOrEmpty(baseUrl) ? $"?query={query}" : string.Empty));
         items = null;
        items = await _myServicesServices.GetMyServices();
        if(!string.IsNullOrEmpty(query))
        {
            items = items.Where(x => x.Name.Contains(query)).ToList();
        }
        if (items == null)
        {
            items = new List<MyServices>();
        }
        isLoggedIn = await _sessionServices.Permissioncheck();
        lastUpdate = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }
}