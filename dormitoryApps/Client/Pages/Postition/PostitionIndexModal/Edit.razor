@using System;
@using System.Timers;
@using System.Threading;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using Blazorise;
@using Blazorise.Components;

@inject SessionServices _sessionServices;
@inject PostitionLineService _postitionLineServices;
@inject NavigationManager _navigationManager;
@inject OfficerServices _officerServices;
@inject PostitionServices _postitionServices;
@inject DepartmentServices _departmentServices;
@code {
    private Modal e;
    List<Department> departments;
    List<Postition> postitions;
    List<PostitionLine> lines;
    int _lineId { get; set; }
    Postition item;
    bool nameValidate = false;
    private dormitoryApps.Client.Pages.Modal.Success success;
    private dormitoryApps.Client.Pages.Modal.Error error;
    Random random = new Random();
    public async void Open(int postitionId)
    {
        item = await _postitionServices.GetById(postitionId);
        _lineId = item.Line;
        postitions = await _postitionServices.GetPostitions();
        lines = await _postitionLineServices.GetPostitionLines();       
        e.Show();
        departments = await _departmentServices.Getdepartments();               
        await InvokeAsync(StateHasChanged);
    }
    public void Close()
    {
        e.Hide();
    }   
    public async void SaveChanges()
    {
        try
        {
              if(string.IsNullOrEmpty(item.Name))
            {
                nameValidate = true;
                await InvokeAsync(StateHasChanged);
                return;
            }
            nameValidate = false;
            var res = await _postitionServices.Update(item);
            if(res)
            {
                success.Details = "แก้ไขตำแหน่งสำเร็จ";
                success.Header = "ยินดีด้วย";
                success.NextRequired = false;
                success.Open();
                Close();
            }
            else
            {
                error.Details = "แก้ไขไม่สำเร็จ";
                error.Open();
            }
        }
        catch(Exception x)
        {
            error.Details = x.Message;
            error.Open();
        }
    }
}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<Modal @ref="e">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>แก้ไขตำแหน่งงาน</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="form-group">
                <label for="postition">ชื่อตำแหน่ง</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            <i class="fa fa-address-card"></i>
                        </div>
                    </div>
                    <input id="postition" @bind-value="item.Name" type="text" class="form-control">
                </div>
                <small style="display:@(nameValidate ? "block":"none")">โปรดกรอกชื่อตำแหน่ง</small>
            </div>
            <div class="form-group">
                <label for="salary">เงินเดือน(พื้นฐาน)</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            <i class="fa fa-money"></i>
                        </div>
                    </div>
                    <input id="salary" @bind-value="item.Salary" type="number" class="form-control">
                </div>
            </div>
             <div class="form-group">
                <label for="salary">ระดับตำแหน่ง</label>
                <div class="input-group">
                    <div class="input-group-prepend">
                        <div class="input-group-text">
                            <i class="fa fa-money"></i>
                        </div>
                    </div>
                    <input id="level" @bind="item.Level" type="number" class="form-control">
                </div>
            </div>
            <div class="form-group">
                <label for="department">แผนก</label>
                <div>
                    <select id="department" @bind="item.Department" class="custom-select">
                        @if (departments == null)
                        {
                            <option disabled>Fetching...</option>
                        }
                        else if (departments.Count == 0)
                        {
                            <option disabled>ไม่พบแผนก</option>
                        }
                        else
                        {
                            @foreach (var department in departments)
                            {
                                <option value="@department.Id">@department.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="Next">ตำแหน่งถัดไป</label>
                <div>
                    <select id="Next" @bind="item.Next" class="custom-select">
                        <option value="null" selected>ไม่ระบุ</option>
                         @if (postitions == null)
                        {
                            <option disabled>Fetching...</option>
                        }
                        else if (postitions.Count == 0)
                        {
                            <option disabled>ไม่พบตำแหน่ง</option>
                        }
                        else
                        {
                            @foreach(var postition in postitions)
                            {
                                bool isDisable = postition.Line == item.Line && postition.Level <= item.Level;
                                <option value="@postition.Id" disabled="@(isDisable ? isDisable:null)">@(postition.Name+"-"+lines.Where(x=>x.Id==postition.Line).FirstOrDefault().Name)</option>
                            }
                        }

                    </select>
                </div>
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" @onclick="e => SaveChanges()">Save Changes</Button>
            <Button Color="Color.Secondary" @onclick="e => Close()">Close</Button>
        </ModalFooter>
    </ModalContent>

</Modal>
<dormitoryApps.Client.Pages.Modal.Success @ref="success"/>
<dormitoryApps.Client.Pages.Modal.Error @ref="error"/>