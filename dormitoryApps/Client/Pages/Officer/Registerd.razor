@page "/Officer/Registerd";
@using dormitoryApps.Shared.Model.Entity;
@using dormitoryApps.Client.Services;
@inject NavigationManager navigationManager;
@inject DistrictServices districtServices;
@inject AddressServices addressServices;
@inject OfficerServices officerServices;
@inject DepartmentServices departmentServices;
@inject PostitionServices postitionServices;
@inject PostitionLineService postitionLineService;
@code {
    dormitoryApps.Shared.Model.Entity.Officer item = new dormitoryApps.Shared.Model.Entity.Officer()
        {
            Brithday = DateTime.Now.AddYears(-24),
            Prefix = "นาย"
        };
    int gender;

    string pass = "";
    string[]? provinces;
    string[]? districts;
    string[]? subdistricts;
    Address addr = new Address();
    int? postalCode { get; set; }
    bool btndisabled = true;
    string Isprocessing = "none";
    List<Postition> postitions = new List<Postition>();
    string department = string.Empty;
    List<PostitionLine> lines;
    string lineName = string.Empty;
    // Validate
    string firstnameValidate = "none";
    string surnameValidate = "none";
    string emailValidate = "none";
    string usernameValidate = "none";

    //Exists
    string usernameexist = "none";
    string emailexist = "none";
}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<center>
    <h1>ลงทะเบียนเจ้าหน้าที่</h1>
</center>
<br />
<br />
<div class="form-group row">
    <label for="text" class="col-4 col-form-label">ชื่อผู้ใช้*</label>
    <div class="col-8">
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">
                    <i class="fa fa-address-card"></i>
                </div>
            </div>
            <input id="text" @bind-value="item.Username" type="text" class="form-control">
            <br />
            <small style="display:@usernameValidate;color:red;">ห้ามเว้นว่าง</small>
            <br />
            <small style="display:@usernameexist;color:red;">มีชื่อผู้ใช้นี้แล้ว</small>
        </div>
    </div>
</div>
<div class="form-group row">
    <label for="text1" class="col-4 col-form-label">รหัสผ่าน*</label>
    <div class="col-8">
        <input id="text1" @bind-value="item.Password" type="password" class="form-control">
    </div>
</div>
<div class="form-group row">
    <label for="text2" class="col-4 col-form-label">ยืนยันรหัสผ่าน*</label>
    <div class="col-8">
        <input id="text2" @bind-value="pass" type="password" class="form-control">
        <br />
        <small style="display:@dis;color:red;">ยืนยันรหัสไม่ผ่าน</small>
    </div>
</div>
<div class="form-group row">
    <label class="col-4"></label>
    <div class="col-8">
        <select id="select" class="custom-select" @bind="item.Prefix">
            <option value="นาย">นาย</option>
            <option value="นางสาว">นางสาว</option>
            <option value="นาง">นาง</option>
        </select>
    </div>
</div>
<div class="form-group row">
    <label for="text3" class="col-4 col-form-label">ชื่อ*</label>
    <div class="col-8">
        <input id="text3" @bind-value="item.Firstname" type="text" class="form-control">
        <br />
        <small style="display:@firstnameValidate;color:red;">ห้ามเว้นว่าง</small>
    </div>
</div>
<div class="form-group row">
    <label for="text4" class="col-4 col-form-label">สกุล*</label>
    <div class="col-8">
        <input id="text4" @bind-value="item.Surname" type="text" class="form-control">
        <br />
        <small style="display:@surnameValidate;color:red;">ห้ามเว้นว่าง</small>
    </div>
</div>
<div class="form-group row">
    <label for="text41" class="col-4 col-form-label">Email*</label>
    <div class="col-8">
        <input id="text41" @bind-value="item.Email" type="email" class="form-control">
        <br />
        <small style="display:@emailValidate;color:red;">ห้ามเว้นว่าง</small>
        <small style="display:@emailexist;color:red;">มี Email นี้แล้ว</small>
    </div>
</div>
<div class="form-group row">
    <label for="text5" class="col-4 col-form-label">วันเกิด</label>
    <div class="col-8">
        <input id="text5" @bind-value="item.Brithday" type="date" class="form-control">
    </div>
</div>
<div class="form-group row">
    <label for="sex" class="col-4 col-form-label">เพศ</label>
    <div class="col-8">
        <select id="sex" class="custom-select" @bind="gender">
            <option value="1">ชาย</option>
            <option value="0">หญิง</option>
            <option value="-1">อื่นๆ</option>
        </select>
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col">
            <div class="form-group row">
                <label for="select1" class="col-4 col-form-label">ตำแหน่ง</label>
                <div class="col-8">
                    <select id="select1" class="custom-select" @onchange="PostitionChange">
                        <option value="1" disabled selected>โปรดเลือก</option>
                        @if (postitions == null || postitions.Count <= 0)
                        {
                            <option disabled>Loading...</option>
                        }
                        else
                        {
                            foreach (var postition in postitions)
                            {
                                <option value="@postition.Id">@postition.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="form-group row">
                <label for="text" class="col-4 col-form-label">แผนก</label>
                <div class="col-8">
                    <input id="text" value="@department" class="form-control" readonly>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="form-group row">
                <label for="text" class="col-4 col-form-label">สายงาน</label>
                <div class="col-8">
                    <input id="text" value="@lineName" class="form-control" readonly>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="form-group row">
    <label for="text6" class="col-4 col-form-label">เงินเดือน</label>
    <div class="col-8">
        <input id="text6" name="text6" type="number" @bind-value="item.Salary" class="form-control">
    </div>
</div>

<h1>ที่อยู่</h1>
<hr />
<div class="container">
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="etc">บ้านเลขที่</label>
                <input id="etc" type="text" @bind-value="addr.etc" class="form-control">
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="moo">หมู่(ไม่มีใส่ 0)</label>
                <input id="moo" type="number" @bind-value="addr.Moo" class="form-control">
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="province">จังหวัด</label>
                <div>
                    <select id="province" class="custom-select" @onchange="ProvinceChange">
                        <option value="n" selected disabled>โปรดเลือก</option>
                        @if (provinces == null)
                        {
                            <option disabled>ไม่พบจังหวัด</option>
                        }
                        else
                        {
                            foreach (var province in provinces)
                            {
                                <option value="@province">@province</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="district">อำเภอ/เขต</label>
                <div>
                    <select id="district" class="custom-select" @onchange="DistrictChange">
                        @if (districts == null)
                        {
                            <option disabled>ไม่พบอำเภอ</option>
                        }
                        else
                        {
                            foreach (var district in districts)
                            {
                                <option value="@district">@district</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="subdistrict">ตำบล</label>
                <div>
                    <select id="subdistrict" class="custom-select" @onchange="SubdistrictChanges">
                        @if (subdistricts == null)
                        {
                            <option disabled>ไม่พบตำบล</option>
                        }
                        else
                        {
                            foreach (var subdistrict in subdistricts)
                            {
                                <option value="@subdistrict">@subdistrict</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="p">Postal Code</label>
                <input id="p" type="text" class="form-control" @bind="@postalCode" readonly>
            </div>
        </div>
    </div>
</div>
<div class="form-group row">
    <div class="offset-4 col-8">
        <button name="submit" type="submit" @onclick="Submit" class="btn btn-primary" disabled="@btndisabled">ลงทะเบียน</button>
        <button name="submit" type="submit" @onclick="Back" class="btn btn-secondary">ย้อนกลับ</button>
        <small style="display:@Isprocessing">กำลังสมัครสมาชิก...</small>
    </div>
</div>

<dormitoryApps.Client.Pages.Officer.Modal.RegisterdCompleted @ref="CompletedModal">
</dormitoryApps.Client.Pages.Officer.Modal.RegisterdCompleted>

<dormitoryApps.Client.Pages.Officer.Modal.RegisterdFailed @ref="FailedModal">
</dormitoryApps.Client.Pages.Officer.Modal.RegisterdFailed>

@code {
    dormitoryApps.Client.Pages.Officer.Modal.RegisterdCompleted CompletedModal;
    dormitoryApps.Client.Pages.Officer.Modal.RegisterdFailed FailedModal;
    string dis = "none";
    private async void Submit()
    {
        Isprocessing = "block";
        switch (gender)
        {
            case 1: item.Gender = true; break;
            case 0: item.Gender = false; break;
            case -1: item.Gender = null; break;
        }
        if (item.Password != pass)
        {
            dis = "block";
            await InvokeAsync(StateHasChanged);
            return;
        }
        dis = "none";
        firstnameValidate = string.IsNullOrEmpty(item.Firstname) ? "block" : "none";
        surnameValidate = string.IsNullOrEmpty(item.Surname) ? "block" : "none";
        emailValidate = string.IsNullOrEmpty(item.Email) ? "block" : "none";
        usernameValidate = string.IsNullOrEmpty(item.Username) ? "block" : "none";
        if (string.IsNullOrEmpty(item.Firstname) || string.IsNullOrEmpty(item.Surname) || string.IsNullOrEmpty(item.Email) || string.IsNullOrEmpty(item.Username))
        {
            await InvokeAsync(StateHasChanged);
            return;
        }
        bool emailIsvalidate = await officerServices.GetExistEmail(item.Email);
        bool usernameIsvalidate = await officerServices.GetExistUsername(item.Username);
        emailexist = !emailIsvalidate ? "block" : "none";
        usernameexist = !usernameIsvalidate ? "block" : "none";
        if(!emailIsvalidate || !usernameIsvalidate)
        {
            await InvokeAsync(StateHasChanged);
            return;
        }
        addr.Id = item.Address;
        var Isregisterd = await officerServices.Create(item);
        if (!Isregisterd)
        {
            FailedModal.Open();
            Isprocessing = "none";
            await InvokeAsync(StateHasChanged);
            return;
        }
        var Isaddr = await addressServices.Create(addr);
        if (!Isaddr)
        {
            FailedModal.Open();
            Isprocessing = "none";
            await InvokeAsync(StateHasChanged);
            return;
        }
        CompletedModal.Open();
        navigationManager.NavigateTo("/");


    }
    private void Back()
    {
        navigationManager.NavigateTo("/Officer");
    }
    private async void ProvinceChange(ChangeEventArgs args)
    {
        /* postalCode = 0;
        addr.Province = args.Value.ToString();
        districts = await districtServices.GetDistricts(addr.Province);
        addr.District = districts.FirstOrDefault();

        subdistricts = await districtServices.GetSubDistricts(addr.Province,addr.District);
        addr.Subdistrict = subdistricts.FirstOrDefault();

        postalCode = await districtServices.GetPostalCode(addr.Province, addr.District, addr.Subdistrict);
        addr.PostalCode = postalCode.Value;

        btndisabled = true;
        await InvokeAsync(StateHasChanged);*/

        btndisabled = false;
        addr.Province = args.Value.ToString();
        var districtItems = await districtServices.GetByProvince(addr.Province);
        districtItems = districtItems.Where(x => x.province.Equals(addr.Province)).ToList();
        districts = districtItems.Select(x => x.amphoe).Distinct().ToArray();
        addr.District = districtItems.Select(x => x.amphoe).Distinct().FirstOrDefault();
        subdistricts = districtItems.Where(x => x.amphoe.Equals(addr.District)).Select(x => x.district).Distinct().ToArray();
        addr.Subdistrict = subdistricts.FirstOrDefault();
        postalCode = districtItems.Where(x => x.amphoe.Equals(addr.District) && x.district.Equals(addr.Subdistrict)).Select(x => int.Parse(x.zipcode)).FirstOrDefault();
        addr.PostalCode = postalCode.Value;
        await InvokeAsync(StateHasChanged);
    }
    private async void DistrictChange(ChangeEventArgs args)
    {
        await InvokeAsync(StateHasChanged);
        postalCode = 0;
        addr.District = args.Value.ToString();
        subdistricts = await districtServices.GetSubDistricts(addr.Province, addr.District);
        addr.Subdistrict = subdistricts.FirstOrDefault();
        postalCode = await districtServices.GetPostalCode(addr.Province, addr.District, addr.Subdistrict);
        btndisabled = false;
        await InvokeAsync(StateHasChanged);

    }
    private async void SubdistrictChanges(ChangeEventArgs args)
    {
        addr.Subdistrict = args.Value.ToString();
        postalCode = await districtServices.GetPostalCode(addr.Province, addr.District, addr.Subdistrict);
        addr.PostalCode = postalCode.Value;
        btndisabled = false;
        await InvokeAsync(StateHasChanged);
    }
    private async void PostitionChange(ChangeEventArgs args)
    {
        item.Postition = int.Parse(args.Value.ToString());
        var mypostition = await postitionServices.GetById(item.Postition);
        var mydepartment = await departmentServices.GetById(mypostition.Department);
        department = mydepartment.Name;
        item.Salary = mypostition.Salary;
        lineName = lines.Where(x => x.Id == mypostition.Line).FirstOrDefault().Name;
        await InvokeAsync(StateHasChanged);
    }

    protected override async void OnInitialized()
    {
        provinces = await districtServices.Getprovince();
        postitions = await postitionServices.GetPostitions();
        lines = await postitionLineService.GetPostitionLines();
        await InvokeAsync(StateHasChanged);
    }

    private async void Saveaddr()
    {
        addr.Id = item.Address;
        var res = await addressServices.Create(addr);
        if (res)
        {
            navigationManager.NavigateTo("/");
        }
    }
    }
