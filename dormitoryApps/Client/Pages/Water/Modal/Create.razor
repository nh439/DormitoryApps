@using System;
@using System.Threading;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@using dormitoryApps.Shared.Model.Json
@using Blazorise;
@inject WaterService _waterService;
@inject SessionServices _sessionServices;
@inject CurrentCustomerService _currentCustomerService;
@inject OfficerServices _officerServices;
@inject RoomServices _roomServices;
@inject BuildingServices _buildingServices;
@inject ClientdataServices _clientdataServices

@code {
    Modal e;
    decimal usage = new decimal();
    Water item = new Water();
    List<CurrentCustomer> customers = new List<CurrentCustomer>();
    List<Water> oldData = new List<Water>();
    CurrentCustomer selectedCustomer = new CurrentCustomer();
    Room room = new Room();
    Buildings buildings = new Buildings();
    Utilities utilities = new Utilities();
    decimal pastUsage = new decimal();
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;
    bool isLoading = false;
    bool isCustomerLoading = false;
    bool waterExist = false;
    bool calculated = false;
    bool submitting = false;
    public async void Open()
    {

        await e.Show();
        calculated = false;
        selectedCustomer = new CurrentCustomer();
        isLoading = true;
        customers = new List<CurrentCustomer>();
        StateHasChanged();
        await Task.Delay(1);
        await _currentCustomerService.Get().ContinueWith(c =>
        {
            customers = c.Result != null ? c.Result.OrderByDescending(x => x.Id).ToList() : new List<CurrentCustomer>();
        });
        isLoading = false;
        item.Year = currentYear;
        item.month = currentMonth;
        utilities = await _clientdataServices.GetUtilities();
        item.Price = utilities.WaterPrice;
        await Task.Delay(1);
        StateHasChanged();
    }
    async void CustomerChange(ChangeEventArgs e)
    {
        isCustomerLoading = true;
        calculated = false;
        await Task.Delay(1);
        string customerId = e.Value.ToString();
        await _currentCustomerService.Get(customerId).ContinueWith(c =>
        {
            selectedCustomer = c.Result != null ? c.Result : new CurrentCustomer();
        });
        room = await _roomServices.GetRoom(selectedCustomer.RoomId);
        buildings = await _buildingServices.Get(room.Building);
        oldData = await _waterService.GetByRental(customerId);
        pastUsage = oldData != null && oldData.Count > 0 ? oldData.Select(x => x.CurrentUnit).Max() : 0;
        item.BeforeUnit = pastUsage;
        isCustomerLoading = false;
        await Task.Delay(1);
        StateHasChanged();
    }
    void Calculate()
    {
        item = _waterService.Calculate(item, out decimal? useres);
        usage = useres ?? 0;
        calculated = true;
        StateHasChanged();
    }
    void MonthChange(ChangeEventArgs e)
    {
        calculated = false;
        string[] time = e.Value.ToString().Split('/');
        item.month = int.Parse(time[0]);
        item.Year = int.Parse(time[1]);
        waterExist = oldData.Where(x => x.month == item.month && x.Year == item.Year) != null && oldData.Where(x => x.month == item.month && x.Year == item.Year).Count() > 0;

    }
    async void SaveChanges()
    {
        auto.Open("Submitting");
        await Task.Delay(10);
        try
        {
            item.Notedate = DateTime.Now;
            item.RentalId = selectedCustomer.Id;
            var actionResult = await _waterService.Create(item);            
            if (actionResult)
            {
                auto.Success("Water Add Successful","Congratulations");
                await Task.Delay(1);
                await e.Hide();
                StateHasChanged();
                return;
            }
            auto.Failed("Something Went Wrong");
            await Task.Delay(10);
        }
        catch (Exception x)
        {
            auto.Failed(x.Message);
            await Task.Delay(10);
        }
        StateHasChanged();

    }
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<Modal @ref="e" Style="color:black">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>เพิ่มบันทึกการใช้น้ำประปา</ModalTitle>
            <CloseButton></CloseButton>
        </ModalHeader>
        <ModalBody>
            @if (isLoading)
            {
                <center>
                    <Div Class="loader"></Div>
                    <br>
                    <h1>Loading...</h1>
                </center>
            }
            else
            {
                <div class="form-group">
                    <label for="select">รหัสการเช่า</label>
                    <div>
                        <select id="select" name="select" @onchange="CustomerChange" class="custom-select">
                            <option selected disabled>โปรดเลือก...</option>
                            @foreach (var itm in customers)
                            {
                                <option value="@itm.Id" disabled="@itm.Booking">@itm.Id</option>
                            }
                        </select>
                    </div>
                </div>
                @if (string.IsNullOrEmpty(selectedCustomer.Id) && !isCustomerLoading)
                {
                    <center>
                        <h1>กรุณาเลือกการเช่า</h1>
                    </center>
                }
                else
                {
                    @if (isCustomerLoading)
                    {
                        <center>
                            <Div Class="loader"></Div>
                            <br>
                            <h1>กำลังเตรียมข้อมูล</h1>
                        </center>
                    }
                    else
                    {
                        <Div Class="row">
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text">ห้อง</label>
                                    <input id="text" @bind-value="room.RoomName" type="text" class="form-control" readonly>
                                </div>
                            </Div>
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text">อาคาร</label>
                                    <input id="text" @bind-value="buildings.Name" type="text" class="form-control" readonly>
                                </div>
                            </Div>
                        </Div>
                        <h2>รายชื่อ</h2>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>ชื่อ-สกุล</th>
                                    <th>สถานะ</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var itm in selectedCustomer.Members.OrderBy(x => x.IsMain))
                                {
                                    <tr>
                                        <td>@($"{itm.Member.Firstname}  {itm.Member.Surname}")</td>
                                        <td>@(itm.IsMain? "ผู้เช่าหลัก": "ผู้เช่าร่วม")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <h2>งวด</h2>
                        <div class="form-group">
                            <label for="select">งวด(เดือน/ปี)</label>
                            <div>
                                <select id="select" @onchange="MonthChange" class="custom-select">
                                    @for (int i = -1; i <= 0; i++)
                                    {
                                        int thismonth = currentMonth + i;
                                        int thisYear = currentYear;
                                        int staymonth = selectedCustomer.Stayed.Month;
                                        int stayyear = selectedCustomer.Stayed.Year;
                                        if (thismonth < 1)
                                        {
                                            thismonth = 12;
                                            thisYear--;

                                        }
                                        bool isExists = oldData.Where(x => x.month == thismonth && x.Year == thisYear) != null && oldData.Where(x => x.month == thismonth && x.Year == thisYear).Count() > 0;
                                        isExists = isExists || (thismonth < staymonth && thisYear < stayyear);
                                        <option value="@($"{thismonth}/{thisYear}")" disabled="@isExists" selected="@(thismonth==currentMonth && thisYear==currentYear)">@($"{thismonth}/{thisYear}")</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <h2>มิเตอร์น้ำ</h2>
                        <Div Class="row">
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text">เลขครั้งก่อน</label>
                                    <input id="text" @bind-value="item.BeforeUnit" type="number" step="0.01" class="form-control" readonly>
                                </div>
                            </Div>
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text">เลขที่อ่านได้</label>
                                    <input id="text" @bind-value="item.CurrentUnit" type="number" step="0.01" class="form-control">
                                </div>
                            </Div>
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text">จำนวนหน่วย</label>
                                    <input id="text" @bind-value="usage" type="number" step="0.01" class="form-control" readonly>
                                </div>
                            </Div>
                        </Div>
                        <Div Class="row">
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text1">ราคาต่อหน่วย</label>
                                    <div class="input-group">
                                        <input id="text1" @bind-value="item.Price" type="text" class="form-control" readonly="@utilities.Readonly">
                                        <div class="input-group-append">
                                            <div class="input-group-text">บาท</div>
                                        </div>
                                    </div>
                                </div>
                            </Div>
                            <Div Class="col">
                                <div class="form-group">
                                    <label for="text1">ราคารวม</label>
                                    <div class="input-group">
                                        <input id="text1" @bind-value="item.Total" type="text" class="form-control" readonly>
                                        <div class="input-group-append">
                                            <div class="input-group-text">บาท</div>
                                        </div>
                                    </div>
                                </div>
                            </Div>
                        </Div>
                        <Div Class="flex-column-reverse">
                            <Div Class="p-2">
                                <Button Class="btn btn-outline-info" @onclick="Calculate">Calculate</Button>
                            </Div>
                        </Div>
                        <Div Style="color:red">
                            **โปรดตรวจสอบข้อมูลให้เรียบร้อยก่อนกด SaveChanges หากสร้างแล้วรายการเกิดผิดพลาด ให้ลบรายการนั้นออก และสร้างใหม่**
                        </Div>
                    }
                }
            }
        </ModalBody>
        <ModalFooter>
            <button  class="btn btn-outline-primary" @onclick="SaveChanges" disabled="@(waterExist || !calculated || submitting)">Save Changes</button>
            <button  class="btn btn-outline-secondary" @onclick="()=>e.Hide()">Close</button>
                      
        </ModalFooter>
    </ModalContent>
</Modal>
<dormitoryApps.Client.Pages.Modal.Error @ref="error" />
<dormitoryApps.Client.Pages.Modal.Success @ref="success" />
<dormitoryApps.Client.Pages.Modal.Auto @ref="auto"/>
@code {
    private dormitoryApps.Client.Pages.Modal.Error error;
    private dormitoryApps.Client.Pages.Modal.Success success;
    private dormitoryApps.Client.Pages.Modal.Auto auto;
}