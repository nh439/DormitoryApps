@page "/Notification/{notificationId}"
@using dormitoryApps.Shared.Model.Entity;
@using dormitoryApps.Client.Services;
@inject NotificationServices _notificationServices;
@inject NotificationAttachmentService _attachmentService;
@inject ExportServices _exportServices;
@code
{
    [Parameter]
    public string notificationId { get; set; }

    const string EXCEL = "file excel outline icon";
    const string WORD = "file word outline icon";
    const string PDF = "file pdf outline icon";
    const string COMMONFILE = "file icon";
    const string IMAGE = "file image outline icon";
    const string AUDIO = "file audio outline icon";
    const string DATABASES = "database icon";
    const string POWERPOINT = "file powerpoint outline icon";
    const string CODEFILE = "file code outline icon";
    const string HTML = "html5 icon";
    const string CSS = "css3 alternate icon";
    const string VIDEO = "file video outline icon";
    const string ARCHIVE = "archive icon";

    Notification notification = new Notification();
    MarkupString detail;
    protected override async void OnInitialized()
    {
        notification = await _notificationServices.GetById(notificationId);
        if (notification == null) notification = new Notification();
        detail = (MarkupString)notification.Detail;
        StateHasChanged();
    }
    async void DownloadAttachment(string attachmentId)
    {
        NotificationAttachment attachment = await _attachmentService.GetAttachment(attachmentId);
        _exportServices.Download(attachment.FileContent, $"{attachment.FileName}{attachment.FileExtension}");
    }
    string GetIcon(string fileextension, string filetype)
    {
        var codeFileExtension = new string[] {
            ".r",
            ".c",
            ".cpp",
            ".h",
            ".cs",
            ".csx",
            ".java",
            ".dart",
            ".js",
            ".ts",
            ".go",
            ".kt",
            ".py",
            ".vb",
            ".php",
            ".phar",
            ".aspx",
            ".cshtml",
            ".vbhtml",
            ".sc",
            ".hh",
            ".hck"
            };
        var databaseFileExtension = new string[]
                             {
            ".db",
            ".mdb",
            ".mdf",
            ".accdb",
            ".sql",
                             };
        if (codeFileExtension.Contains(fileextension.ToLower())) return CODEFILE;
        else if (databaseFileExtension.Contains(fileextension.ToLower())) return DATABASES;
        else if (filetype.ToLower().Equals(".css")) return CSS;
        else if (new string[] { ".htm", ".html" }.Contains(fileextension.ToLower())) return HTML;
        else
        {
            if (filetype.ToLower().Contains("audio")) return AUDIO;
            else if (filetype.ToLower().Contains("video")) return VIDEO;
            else if (filetype.ToLower().Contains("image")) return IMAGE;
            else if (filetype.ToLower().Equals("application/vnd.rar") ||
            filetype.ToLower().Equals("pplication/x-7z-compressed") ||
            filetype.ToLower().Equals("application/zip")) return ARCHIVE;
            else if (filetype.ToLower().Equals("application/vnd.ms-excel") ||
            filetype.ToLower().Equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") ||
            filetype.ToLower().Equals("application/vnd.oasis.opendocument.spreadsheet") ||
            filetype.ToLower().Equals("text/csv")) return EXCEL;
            else if (filetype.ToLower().Equals("application/msword") ||
            filetype.ToLower().Equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document") ||
            filetype.ToLower().Equals("application/vnd.oasis.opendocument.text")) return WORD;
            else if (filetype.ToLower().Equals("application/vnd.ms-powerpoint") ||
            filetype.ToLower().Equals("application/vnd.openxmlformats-officedocument.presentationml.presentation") ||
            filetype.ToLower().Equals("application/vnd.oasis.opendocument.presentation")) return POWERPOINT;
        }
        return COMMONFILE;
    }

}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css">
@if (notification == new Notification())
{
    <center>
        <h1>ไม่พบการแจ้งเตือนนี้</h1>
    </center>
}
else
{
    <center>
        <h1>@notification.Header</h1>
    </center>
    <h2>จาก : @notification.SenderFrom</h2>
    <h2>วันที่ : @notification.Date.ToString("dddd ที่ dd MMMM yyyy HH:mm:ss")</h2>
    <br />
    <br />
    <div class="container" style="background-color:	#FFFFCC;color:black">
        <br>
        @detail
        <br>
    </div>
    @if (notification.Attachments != null && notification.Attachments.Count > 0)
    {
        <h2>เอกสารที่แนบมา</h2>
        <div class="ui three column grid  d-none d-sm-block">
            @foreach (var attachment in notification.Attachments)
            {
                string fileIcon = GetIcon(attachment.FileExtension, attachment.FileType);
                <div class="column">
                    <div class="ui segment">
                        <h2><i class="@fileIcon"></i>  @($"{attachment.FileName}{attachment.FileExtension}")</h2>
                        <h3>@attachment.FileSize bytes</h3>
                        <br>
                        <button class="btn btn-primary" @onclick="()=> DownloadAttachment(attachment.Id)"><i class="download icon"></i> Download</button>
                    </div>
                </div>
            }
        </div>
        <div class="d-block d-sm-none">
            @foreach (var attachment in notification.Attachments)
            {
                string fileIcon = GetIcon(attachment.FileExtension, attachment.FileType);
                <div class="ui segment">
                    <h2><i class="@fileIcon"></i>  @($"{attachment.FileName}{attachment.FileExtension}")</h2>
                    <h3>@attachment.FileSize bytes</h3>
                    <br>
                    <button class="btn btn-primary" @onclick="()=> DownloadAttachment(attachment.Id)"><i class="download icon"></i> Download</button>
                </div>
            }
        </div>
    }
}
<br />
<br />