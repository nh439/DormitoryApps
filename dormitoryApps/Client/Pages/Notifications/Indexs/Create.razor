@using Blazorise;
@using Blazorise.RichTextEdit;
@using dormitoryApps.Client.Services;
@using dormitoryApps.Shared.Model.Entity;
@using Blazored.Typeahead;
@inject NotificationServices _notificationServices;
@inject OfficerServices _officerServices;
@inject SessionServices _sessionServices;
@inject PostitionServices _postitionServices;
@inject PostitionLineService _postitionLineService;
@inject DepartmentServices _departmentService;
@inject NavigationManager _navigationManager;
<h2>สร้างการแจ้งเตือน</h2>

@code {
    Officer currentUser = new Officer();
    Notification item = new Notification();
    RichTextEdit details;
    List<Officer> allOfficer = new List<Officer>();
    List<Department> departments = new List<Department>();
    List<Postition> postitions = new List<Postition>();
    List<PostitionLine> postitionLines = new List<PostitionLine>();
    IList<Officer> selectedOfficer = new List<Officer>();
    bool headerValidate = false;
    bool attendeeValidate = false;
    protected override async void OnInitialized()
    {
        currentUser = await _sessionServices.GetCurrentLogin();
        item = new Notification()
            {
                SenderId = currentUser.Id,
                SenderFrom = $"{currentUser.Firstname} {currentUser.Surname}"
            };
        allOfficer = await _officerServices.GetEmployee();
        departments = await _departmentService.Getdepartments();
        postitionLines = await _postitionLineService.GetPostitionLines();
        postitions = await _postitionServices.GetPostitions();
        StateHasChanged();
    }
    async void SaveDetail()
    {
        item.Detail = await details.GetHtmlAsync();
    }
    async void FileChanged(InputFileChangeEventArgs e)
    {
        auto.NextRequired = false;
        auto.ForceLoad = false;
        await Task.Delay(5);
        auto.Open("Uploading");
        await Task.Delay(5);
        try
        {
            item.Attachments = new List<NotificationAttachment>();
            var files = e.GetMultipleFiles(5);
            List<NotificationAttachment> attachments = new List<NotificationAttachment>();
            foreach (var file in files)
            {
                NotificationAttachment attachment = new NotificationAttachment()
                    {
                        FileCreateDate = file.LastModified.DateTime,
                        FileExtension = Path.GetExtension(file.Name),
                        FileName = Path.GetFileNameWithoutExtension(file.Name),
                        FileSize = file.Size,
                        FileType = file.ContentType
                    };
                var stream = file.OpenReadStream(200000000);
                MemoryStream memory = new MemoryStream();
                await stream.CopyToAsync(memory);
                attachment.FileContent = memory.ToArray();
                memory.Dispose();
                attachments.Add(attachment);
            }
            item.Attachments = attachments;
            auto.Success("Upload Completed");
            await Task.Delay(10);
            StateHasChanged();
        }
        catch (Exception x)
        {
            auto.Failed(x.Message);
            await Task.Delay(5);
        }
        StateHasChanged();
    }
    void ClearAttachment()
    {
        item.Attachments = new List<NotificationAttachment>();
        StateHasChanged();
    }
    void ClearAttachment(string attachmentId)
    {
        item.Attachments = item.Attachments.Where(x => x.Id != attachmentId).ToList();
        StateHasChanged();
    }   
    async void SaveChanges()
    {
        attendeeValidate = !item.SendAll && (selectedOfficer == null || selectedOfficer.Count == 0);
        headerValidate = string.IsNullOrEmpty(item.Header);
        if (headerValidate || attendeeValidate) return;
        auto.NextRequired = false;
        auto.ForceLoad = false;
        auto.Open("Sending..");
        try
        {
            if (!item.SendAll)
            {
                List<NotificationAttendee> attendees = new List<NotificationAttendee>();
                foreach (var i in selectedOfficer)
                {
                    attendees.Add(new NotificationAttendee
                        {
                            NotificationId = item.Id,
                            UserId = i.Id
                        });
                }
                item.Attendees = attendees;

            }
            item.Date = DateTime.Now;
            var result = await _notificationServices.Create(item);
            if (result)
            {
                auto.NextRequired = true;
                auto.NextLink = "/Notification";
                auto.ForceLoad = true;
                auto.Success("Send Complete");
                await Task.Delay(5);
                return;
            }
            auto.Failed("Send Incomplete");

        }
        catch (Exception x)
        {
            auto.Failed(x.Message);
        }

    }
    async Task<IEnumerable<Officer>> GetEmployees(string searchText)
    {
        return await Task.FromResult(allOfficer.Where(x => $"{x.Firstname} {x.Surname}".ToLower().Contains(searchText.ToLower())));
    }
}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="form-group">
    <label for="text">จาก</label>
    <input id="text" @bind-value="item.SenderFrom" type="text" class="form-control" readonly>
</div>
<br />


<div class="form-group">
    <label>ถึง</label>
  <BlazoredTypeahead SearchMethod="GetEmployees"
                               @bind-Values="@selectedOfficer"
                               Disabled="false"
                               EnableDropDown="true">
                    <SelectedTemplate>
                        @context.Firstname @context.Surname
                    </SelectedTemplate>
                    <ResultTemplate>
                        @context.Firstname @context.Surname (Id: @context.Id)
                    </ResultTemplate>
                </BlazoredTypeahead>
                <small style="color:red;display:@(attendeeValidate? "block":"none")">ต้องมีผู้เข้าร่วม</small>
</div>

<br />
<div class="form-group">
    <label for="text1">หัวเรื่อง</label>
    <input id="text1" @bind-value="item.Header" type="text" class="form-control @(headerValidate ? "is-invalid":"")">
</div>
<div class="form-group">
    <label for="textarea">รายละเอียด</label>
    <RichTextEdit style="background-color:wheat;color:black" @ref="details" ContentChanged="SaveDetail">
        <Toolbar>
            <RichTextEditToolbarGroup>
                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                    <RichTextEditToolbarSelectItem Value="small" />
                    <RichTextEditToolbarSelectItem Selected />
                    <RichTextEditToolbarSelectItem Value="large" />
                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                </RichTextEditToolbarSelect>
                <RichTextEditToolbarSelect Action="RichTextEditAction.Color">
                    <RichTextEditToolbarSelectItem Selected />
                    <RichTextEditToolbarSelectItem Value="red" />
                    <RichTextEditToolbarSelectItem Value="black" />
                    <RichTextEditToolbarSelectItem Value="silver" />
                    <RichTextEditToolbarSelectItem Value="gray" />
                    <RichTextEditToolbarSelectItem Value="white" />
                    <RichTextEditToolbarSelectItem Value="maroon" />
                    <RichTextEditToolbarSelectItem Value="purple" />
                    <RichTextEditToolbarSelectItem Value="fuchsia" />
                    <RichTextEditToolbarSelectItem Value="green" />
                    <RichTextEditToolbarSelectItem Value="lime" />
                    <RichTextEditToolbarSelectItem Value="olive" />
                    <RichTextEditToolbarSelectItem Value="yellow" />
                    <RichTextEditToolbarSelectItem Value="navy" />
                    <RichTextEditToolbarSelectItem Value="blue" />
                    <RichTextEditToolbarSelectItem Value="teal" />
                    <RichTextEditToolbarSelectItem Value="aqua" />

                </RichTextEditToolbarSelect>
                <RichTextEditToolbarSelect Action="RichTextEditAction.Background">
                    <RichTextEditToolbarSelectItem Selected />
                    <RichTextEditToolbarSelectItem Value="red" />
                    <RichTextEditToolbarSelectItem Value="black" />
                    <RichTextEditToolbarSelectItem Value="silver" />
                    <RichTextEditToolbarSelectItem Value="gray" />
                    <RichTextEditToolbarSelectItem Value="white" />
                    <RichTextEditToolbarSelectItem Value="maroon" />
                    <RichTextEditToolbarSelectItem Value="purple" />
                    <RichTextEditToolbarSelectItem Value="fuchsia" />
                    <RichTextEditToolbarSelectItem Value="green" />
                    <RichTextEditToolbarSelectItem Value="lime" />
                    <RichTextEditToolbarSelectItem Value="olive" />
                    <RichTextEditToolbarSelectItem Value="yellow" />
                    <RichTextEditToolbarSelectItem Value="navy" />
                    <RichTextEditToolbarSelectItem Value="blue" />
                    <RichTextEditToolbarSelectItem Value="teal" />
                    <RichTextEditToolbarSelectItem Value="aqua" />
                </RichTextEditToolbarSelect>
                <RichTextEditToolbarSelect Action="RichTextEditAction.Align">
                    <RichTextEditToolbarSelectItem Selected />
                    <RichTextEditToolbarSelectItem Value="center" />
                    <RichTextEditToolbarSelectItem Value="right" />
                </RichTextEditToolbarSelect>


                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
                <RichTextEditToolbarButton Action="RichTextEditAction.CodeBlock" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Font" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Image" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Underline" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Script" />
            </RichTextEditToolbarGroup>
        </Toolbar>
    </RichTextEdit>
</div>
<br />
<div class="form-group">
    <label for="text2">เอกสาร(สูงสุด 5 ไฟล์)</label>
    <InputFile class="form-control" OnChange="FileChanged" multiple />
    <Button Class="btn btn-danger" @onclick="ClearAttachment"><i class="trash alternate outline icon"></i></Button>
</div>
<br />
@if (item.Attachments != null && item.Attachments.Count > 0)
{
    <center>
        <h3>เอกสารที่แนบไป</h3>
    </center>
    <Table Class="table" Style="text-align:center">
        <thead class="table-dark">
            <tr>
                <th>#</th>
                <th>ชื่อเอกสาร</th>
                <th>ขนาด(Bytes)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var itm in item.Attachments.Select((x, y) => new { Data = x, Index = y }))
            {
                <tr class="@(itm.Index % 2==0 ? "table-primary":"table-info" )">
                    <td>@(1+itm.Index)</td>
                    <td>@($"{itm.Data.FileName}{itm.Data.FileExtension}")</td>
                    <td>@itm.Data.FileSize</td>
                    <td><Button Class="btn btn-danger" @onclick="()=> ClearAttachment(itm.Data.Id)"><i class="trash alternate outline icon"></i></Button></td>
                </tr>
            }
        </tbody>
    </Table>

}
<br />
<div class="form-group">
    <div>
        <div class="custom-control custom-checkbox custom-control-inline">
            <input @bind="item.SendAll" id="checkbox_0" type="checkbox" class="custom-control-input" value="true">
            <label for="checkbox_0" class="custom-control-label">ส่งถึงทุกคน</label>
        </div>
        <div class="custom-control custom-checkbox custom-control-inline">
            <input @bind="item.Secure" id="checkbox_1" type="checkbox" class="custom-control-input" value="true">
            <label for="checkbox_1" class="custom-control-label">ส่วนตัว</label>
        </div>
    </div>
</div>

<Button Class="btn btn-primary" @onclick="SaveChanges">Send Notification</Button>

<dormitoryApps.Client.Pages.Modal.Auto @ref="auto" />
@code {
    dormitoryApps.Client.Pages.Modal.Auto auto;
}