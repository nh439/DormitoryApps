@using dormitoryApps.Client.Services;
@inject SessionServices sessionServices;
@using dormitoryApps.Shared.Model.Entity;
@using Blazored.SessionStorage;
@using Blazored.LocalStorage;
@inject OfficerServices officerServices;
@inject NavigationManager navigationManager;
@inject ISessionStorageService sessionStorageService;
@inject ILocalStorageService localStorageService;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Nithi Residences</a>
        <!--button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </!--button-->
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (currentlogin != null)
        {
            <div class="nav-item px-3" style="color:white">

                <center>
                    @(currentlogin.Firstname+" "+currentlogin.Surname)
                </center>

            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @if (currentlogin == null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Officer">
                    Officer Login
                </NavLink>
            </div>
        }
        else
        {
          
                 <div class="nav-item px-3">
                <NavLink class="nav-link" href="Buildings">
                    My Buildings and Rooms
                </NavLink>
            </div>                      
            
             <div class="nav-item px-3">
                <NavLink class="nav-link" href="Employees">
                    Employees
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Profile">
                    My Profile
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Departments">
                    Departments
                </NavLink>
            </div>
             <div class="nav-item px-3">
                <NavLink class="nav-link" href="Customer">
                    My Customer
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Invoices">
                    Invoices
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Electricity">
                    Electricity
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="Water">
                    Water
                </NavLink>
            </div>
           
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Services">
                My Services
            </NavLink>
        </div>
         @if(IsAdmin)
            {
                <div class="nav-item px-3">
                <NavLink class="nav-link" href="Postitions">
                    Career and Path
                </NavLink>
            </div>
            }
        @if (currentlogin != null)
        {
            <div class="nav-item px-3">
                <center>
                    <button class="btn btn-primary" @onclick="Logout">
                        Logout
                    </button>
                </center>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "" : null;

    Officer? currentlogin { get; set; }
    bool IsAdmin = false;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    protected override async void OnInitialized()
    {

        string sessionId = await localStorageService.GetItemAsStringAsync("Id");
        if (!string.IsNullOrEmpty(sessionId))
        {
            var IsNotExpired = await sessionServices.Permissioncheck();
            if(!IsNotExpired)
            {
                await Logout();
            }
            currentlogin = await sessionServices.GetCurrentLogin();
            IsAdmin = await sessionServices.IsAdmin();
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task Logout()
    {
        await officerServices.Logout();  
        navigationManager.NavigateTo("/", true);
    }

}
